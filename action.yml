name: "Rust Cross Build"
description: "A configurable GitHub Action to build, test, and check Rust projects with cross-compilation support"

branding:
  icon: "package"
  color: "orange"

inputs:
  command:
    description: "Command to execute (build, test, check)"
    required: false
    default: "build"
  targets:
    description: "Rust target triple(s) to build for (comma-separated, e.g., x86_64-unknown-linux-musl,aarch64-unknown-linux-musl)"
    required: false
    default: ""
  profile:
    description: "Build profile (debug or release)"
    required: false
    default: "release"
  features:
    description: "Comma-separated list of features to activate"
    required: false
  no-default-features:
    description: "Do not activate default features"
    required: false
    default: "false"
  all-features:
    description: "Activate all available features"
    required: false
    default: "false"
  package:
    description: "Package to build (workspace member)"
    required: false
  bin:
    description: "Binary target to build"
    required: false
  workspace:
    description: "Build all workspace members"
    required: false
    default: "false"
  manifest-path:
    description: "Path to Cargo.toml"
    required: false
  source-dir:
    description: "The directory containing the Rust project to build"
    required: false
    default: ${{ github.workspace }}
  result-dir:
    description: "The directory to store build results"
    required: false
  bin-name-no-suffix:
    description: "Do not append target suffix to binary name"
    required: false
    default: "false"
  github-proxy-mirror:
    description: "GitHub proxy mirror URL for downloading cross compilers"
    required: false
  cross-compiler-dir:
    description: "Directory to store cross compilers"
    required: false
  ndk-version:
    description: "Android NDK version for Android builds"
    required: false
    default: "r27"
  use-default-linker:
    description: "Use system default linker (no cross-compiler download)"
    required: false
    default: "false"
  cc:
    description: "Force set the C compiler"
    required: false
  cxx:
    description: "Force set the C++ compiler"
    required: false
  rustflags:
    description: "Additional rustflags"
    required: false
  static-crt:
    description: "Add -C target-feature=+crt-static to rustflags for static CRT linking"
    required: false
    default: "false"
  build-std:
    description: "Use -Zbuild-std for building standard library from source (true for default, or specify crates like 'core,alloc')"
    required: false
    default: "false"
  clean-cache:
    description: "Clean build cache before building"
    required: false
    default: "false"
  no-strip:
    description: "Do not strip binaries"
    required: false
    default: "false"
  verbose:
    description: "Use verbose output"
    required: false
    default: "false"
  show-all-targets:
    description: "Show all supported targets and exit"
    required: false
    default: "false"
  args:
    description: "Additional arguments to pass to cargo build"
    required: false
  toolchain:
    description: "Rust toolchain to use (stable, nightly, etc.)"
    required: false
  cargo-trim-paths:
    description: "Set CARGO_TRIM_PATHS environment variable for reproducible builds"
    required: false
  trim-paths:
    description: "Set CARGO_TRIM_PATHS environment variable for reproducible builds"
    required: false
  no-embed-metadata:
    description: "Add -Zno-embed-metadata flag to cargo"
    required: false
    default: "false"
  bins:
    description: "Build all binary targets"
    required: false
    default: "false"
  lib:
    description: "Build only the library target"
    required: false
    default: "false"
  all-targets:
    description: "Build all targets (equivalent to --lib --bins --tests --benches --examples)"
    required: false
    default: "false"
  release:
    description: "Build optimized artifacts with the release profile"
    required: false
    default: "false"
  quiet:
    description: "Do not print cargo log messages"
    required: false
    default: "false"
  message-format:
    description: "The output format for diagnostic messages"
    required: false
  ignore-rust-version:
    description: "Ignore rust-version specification in packages"
    required: false
    default: "false"
  locked:
    description: "Asserts that exact same dependencies are used as Cargo.lock"
    required: false
    default: "false"
  offline:
    description: "Prevents Cargo from accessing the network"
    required: false
    default: "false"
  frozen:
    description: "Equivalent to specifying both --locked and --offline"
    required: false
    default: "false"
  jobs:
    description: "Number of parallel jobs to run"
    required: false
  keep-going:
    description: "Build as many crates as possible, don't abort on first failure"
    required: false
    default: "false"
  future-incompat-report:
    description: "Displays a future-incompat report for warnings"
    required: false
    default: "false"

outputs:
  result-dir:
    description: "Directory containing built artifacts"
    value: ${{ steps.execute.outputs.result-dir }}
  targets:
    description: "Targets that were processed"
    value: ${{ steps.execute.outputs.targets }}

runs:
  using: "composite"
  steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.toolchain || 'stable' }}
        override: true
        profile: minimal

    - name: Show all targets
      if: ${{ inputs.show-all-targets == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        "${{ github.action_path }}/exec.sh" --show-all-targets

    - name: Execute
      id: execute
      if: ${{ inputs.show-all-targets == 'false' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        # Set default result directory if not specified
        RESULT_DIR="${{ inputs.result-dir }}"
        if [ -z "$RESULT_DIR" ]; then
          RESULT_DIR="${{ inputs.source-dir }}/target/cross"
        fi

        # Set default targets if not specified
        TARGETS="${{ inputs.targets }}"
        if [ -z "$TARGETS" ]; then
          TARGETS="$(rustc -vV | grep host | cut -d' ' -f2)"
        fi

        # Execute command
        "${{ github.action_path }}/exec.sh" \
          ${{ inputs.command }} \
          ${{ inputs.targets != '' && format('--targets={0}', inputs.targets) || '' }} \
          --profile=${{ inputs.profile }} \
          ${{ inputs.features != '' && format('--features={0}', inputs.features) || '' }} \
          ${{ inputs.no-default-features == 'true' && '--no-default-features' || '' }} \
          ${{ inputs.all-features == 'true' && '--all-features' || '' }} \
          ${{ inputs.package != '' && format('--package={0}', inputs.package) || '' }} \
          ${{ inputs.bin != '' && format('--bin={0}', inputs.bin) || '' }} \
          ${{ inputs.bins == 'true' && '--bins' || '' }} \
          ${{ inputs.lib == 'true' && '--lib' || '' }} \
          ${{ inputs.all-targets == 'true' && '--all-targets' || '' }} \
          ${{ inputs.workspace == 'true' && '--workspace' || '' }} \
          ${{ inputs.release == 'true' && '--release' || '' }} \
          ${{ inputs.quiet == 'true' && '--quiet' || '' }} \
          ${{ inputs.message-format != '' && format('--message-format={0}', inputs.message-format) || '' }} \
          ${{ inputs.ignore-rust-version == 'true' && '--ignore-rust-version' || '' }} \
          ${{ inputs.locked == 'true' && '--locked' || '' }} \
          ${{ inputs.offline == 'true' && '--offline' || '' }} \
          ${{ inputs.frozen == 'true' && '--frozen' || '' }} \
          ${{ inputs.jobs != '' && format('--jobs={0}', inputs.jobs) || '' }} \
          ${{ inputs.keep-going == 'true' && '--keep-going' || '' }} \
          ${{ inputs.future-incompat-report == 'true' && '--future-incompat-report' || '' }} \
          ${{ inputs.manifest-path != '' && format('--manifest-path={0}', inputs.manifest-path) || '' }} \
          --result-dir="$RESULT_DIR" \
          ${{ inputs.bin-name-no-suffix == 'true' && '--bin-name-no-suffix' || '' }} \
          ${{ inputs.github-proxy-mirror != '' && format('--github-proxy-mirror={0}', inputs.github-proxy-mirror) || '' }} \
          ${{ inputs.cross-compiler-dir != '' && format('--cross-compiler-dir={0}', inputs.cross-compiler-dir) || '' }} \
          --ndk-version=${{ inputs.ndk-version }} \
          ${{ inputs.use-default-linker == 'true' && '--use-default-linker' || '' }} \
          ${{ inputs.cc != '' && format('--cc={0}', inputs.cc) || '' }} \
          ${{ inputs.cxx != '' && format('--cxx={0}', inputs.cxx) || '' }} \
          ${{ inputs.rustflags != '' && format('--rustflags={0}', inputs.rustflags) || '' }} \
          ${{ inputs.static-crt == 'true' && '--static-crt' || '' }} \
          ${{ inputs.build-std != 'false' && inputs.build-std != '' && (inputs.build-std == 'true' && '--build-std' || format('--build-std={0}', inputs.build-std)) || '' }} \
          ${{ inputs.clean-cache == 'true' && '--clean-cache' || '' }} \
          ${{ inputs.no-strip == 'true' && '--no-strip' || '' }} \
          ${{ inputs.verbose == 'true' && '--verbose' || '' }} \
          ${{ inputs.args != '' && format('--args={0}', inputs.args) || '' }} \
          ${{ inputs.toolchain != '' && format('--toolchain={0}', inputs.toolchain) || '' }} \
          ${{ inputs.cargo-trim-paths != '' && format('--cargo-trim-paths={0}', inputs.cargo-trim-paths) || '' }} \
          ${{ inputs.trim-paths != '' && format('--trim-paths={0}', inputs.trim-paths) || '' }} \
          ${{ inputs.no-embed-metadata == 'true' && '--no-embed-metadata' || '' }}

        # Set outputs
        echo "result-dir=$RESULT_DIR" >> $GITHUB_OUTPUT
        echo "targets=$TARGETS" >> $GITHUB_OUTPUT
