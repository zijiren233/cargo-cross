name: "Rust Cross Build"
description: "A configurable GitHub Action to build, test, and check Rust projects with cross-compilation support"

branding:
  icon: "package"
  color: "orange"

inputs:
  command:
    description: "Command to execute (build, test, check)"
    required: false
    default: "build"
  target:
    description: "Rust target triple(s) to build for (newline-separated recommended, comma-separated also supported)"
    required: false
    default: ""
  targets:
    description: "Rust target triple(s) to build for (newline-separated recommended, comma-separated also supported)"
    required: false
    default: ""
  profile:
    description: "Build profile (debug or release)"
    required: false
    default: "release"
  features:
    description: "Comma-separated list of features to activate"
    required: false
  no-default-features:
    description: "Do not activate default features"
    required: false
    default: "false"
  all-features:
    description: "Activate all available features"
    required: false
    default: "false"
  package:
    description: "Package to build (workspace member)"
    required: false
  bin:
    description: "Binary target to build"
    required: false
  workspace:
    description: "Build all workspace members"
    required: false
    default: "false"
  manifest-path:
    description: "Path to Cargo.toml"
    required: false
  source-dir:
    description: "The directory containing the Rust project to build"
    required: false
    default: ${{ github.workspace }}
  bin-name-no-suffix:
    description: "Do not append target suffix to binary name"
    required: false
    default: "false"
  github-proxy-mirror:
    description: "GitHub proxy mirror URL for downloading cross compilers"
    required: false
  cross-compiler-dir:
    description: "Directory to store cross compilers"
    required: false
  ndk-version:
    description: "Android NDK version for Android builds"
    required: false
    default: "r27"
  use-default-linker:
    description: "Use system default linker (no cross-compiler download)"
    required: false
    default: "false"
  cc:
    description: "Force set the C compiler"
    required: false
  cxx:
    description: "Force set the C++ compiler"
    required: false
  rustflags:
    description: "Additional rustflags"
    required: false
  static-crt:
    description: "Control CRT linking mode: 'true' for static (+crt-static), 'false' for dynamic (-crt-static), empty for default behavior"
    required: false
    default: ""
  build-std:
    description: "Use -Zbuild-std for building standard library from source (true for default, or specify crates like 'core,alloc')"
    required: false
    default: "false"
  clean-cache:
    description: "Clean build cache before building"
    required: false
    default: "false"
  no-strip:
    description: "Do not strip binaries"
    required: false
    default: "false"
  verbose:
    description: "Use verbose output"
    required: false
    default: "false"
  show-all-targets:
    description: "Show all supported targets and exit"
    required: false
    default: "false"
  args:
    description: "Additional arguments to pass to cargo build"
    required: false
  toolchain:
    description: "Rust toolchain to use (stable, nightly, etc.)"
    required: false
  cargo-trim-paths:
    description: "Set CARGO_TRIM_PATHS environment variable for reproducible builds"
    required: false
  trim-paths:
    description: "Set CARGO_TRIM_PATHS environment variable for reproducible builds"
    required: false
  no-embed-metadata:
    description: "Add -Zno-embed-metadata flag to cargo"
    required: false
    default: "false"
  bins:
    description: "Build all binary targets"
    required: false
    default: "false"
  lib:
    description: "Build only the library target"
    required: false
    default: "false"
  all-targets:
    description: "Build all targets (equivalent to --lib --bins --tests --benches --examples)"
    required: false
    default: "false"
  release:
    description: "Build optimized artifacts with the release profile"
    required: false
    default: "false"
  quiet:
    description: "Do not print cargo log messages"
    required: false
    default: "false"
  message-format:
    description: "The output format for diagnostic messages"
    required: false
  ignore-rust-version:
    description: "Ignore rust-version specification in packages"
    required: false
    default: "false"
  locked:
    description: "Asserts that exact same dependencies are used as Cargo.lock"
    required: false
    default: "false"
  offline:
    description: "Prevents Cargo from accessing the network"
    required: false
    default: "false"
  frozen:
    description: "Equivalent to specifying both --locked and --offline"
    required: false
    default: "false"
  jobs:
    description: "Number of parallel jobs to run"
    required: false
  keep-going:
    description: "Build as many crates as possible, don't abort on first failure"
    required: false
    default: "false"
  future-incompat-report:
    description: "Displays a future-incompat report for warnings"
    required: false
    default: "false"

outputs:
  targets:
    description: "Targets that were processed"
    value: ${{ steps.execute.outputs.targets }}

runs:
  using: "composite"
  steps:
    - name: Setup Rustup
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Show all targets
      if: ${{ inputs.show-all-targets == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        "${{ github.action_path }}/cross.sh" --show-all-targets

    - name: Execute
      id: execute
      if: ${{ inputs.show-all-targets == 'false' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      env:
        INPUT_COMMAND: ${{ inputs.command }}
        INPUT_TARGET: ${{ inputs.target }}
        INPUT_TARGETS: ${{ inputs.targets }}
        INPUT_PROFILE: ${{ inputs.profile }}
        INPUT_FEATURES: ${{ inputs.features }}
        INPUT_NO_DEFAULT_FEATURES: ${{ inputs.no-default-features }}
        INPUT_ALL_FEATURES: ${{ inputs.all-features }}
        INPUT_PACKAGE: ${{ inputs.package }}
        INPUT_BIN: ${{ inputs.bin }}
        INPUT_BINS: ${{ inputs.bins }}
        INPUT_LIB: ${{ inputs.lib }}
        INPUT_ALL_TARGETS: ${{ inputs.all-targets }}
        INPUT_WORKSPACE: ${{ inputs.workspace }}
        INPUT_RELEASE: ${{ inputs.release }}
        INPUT_QUIET: ${{ inputs.quiet }}
        INPUT_MESSAGE_FORMAT: ${{ inputs.message-format }}
        INPUT_IGNORE_RUST_VERSION: ${{ inputs.ignore-rust-version }}
        INPUT_LOCKED: ${{ inputs.locked }}
        INPUT_OFFLINE: ${{ inputs.offline }}
        INPUT_FROZEN: ${{ inputs.frozen }}
        INPUT_JOBS: ${{ inputs.jobs }}
        INPUT_KEEP_GOING: ${{ inputs.keep-going }}
        INPUT_FUTURE_INCOMPAT_REPORT: ${{ inputs.future-incompat-report }}
        INPUT_MANIFEST_PATH: ${{ inputs.manifest-path }}
        INPUT_BIN_NAME_NO_SUFFIX: ${{ inputs.bin-name-no-suffix }}
        INPUT_GITHUB_PROXY_MIRROR: ${{ inputs.github-proxy-mirror }}
        INPUT_CROSS_COMPILER_DIR: ${{ inputs.cross-compiler-dir }}
        INPUT_NDK_VERSION: ${{ inputs.ndk-version }}
        INPUT_USE_DEFAULT_LINKER: ${{ inputs.use-default-linker }}
        INPUT_CC: ${{ inputs.cc }}
        INPUT_CXX: ${{ inputs.cxx }}
        INPUT_RUSTFLAGS: ${{ inputs.rustflags }}
        INPUT_STATIC_CRT: ${{ inputs.static-crt }}
        INPUT_BUILD_STD: ${{ inputs.build-std }}
        INPUT_CLEAN_CACHE: ${{ inputs.clean-cache }}
        INPUT_NO_STRIP: ${{ inputs.no-strip }}
        INPUT_VERBOSE: ${{ inputs.verbose }}
        INPUT_ARGS: ${{ inputs.args }}
        INPUT_TOOLCHAIN: ${{ inputs.toolchain }}
        INPUT_CARGO_TRIM_PATHS: ${{ inputs.cargo-trim-paths }}
        INPUT_TRIM_PATHS: ${{ inputs.trim-paths }}
        INPUT_NO_EMBED_METADATA: ${{ inputs.no-embed-metadata }}
        ACTION_PATH: ${{ github.action_path }}
        SOURCE_DIR: ${{ inputs.source-dir }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        "${{ github.action_path }}/action-wrapper.sh"
